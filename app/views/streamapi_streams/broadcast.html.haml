#broadcast-container
  %h2 Stream Broadcast
  %p
    = @stream.title + ' - ' + @stream.starts_at.strftime("%m/%d/%Y")
  -unless flash[:error]
    %embed{:id => 'broadcast-embed', :height=>"#{ @theme.height }", :width=>"#{ @theme.width }", :class => 'streamapi-embed', :wmode=>"", :type=>"application/x-shockwave-flash", :bgcolor=>"#000000", :quality=>"high", :scale=>"noscale", :allowfullscreen=>"true", :allowscriptaccess=>"always", :flashvars=>"siteID=1000008664&layoutPath=#{ @theme.layout_path }&skinPath=#{ @theme.skin_path }&autoRecord=true&publicHostID=#{ @stream.public_hostid }&privateHostID=#{ @stream.private_hostid }&userType=host", :src=>"http://static.streamapi.com/flash/loader.swf?app=custom.swf"}
    .public_private_switch
      .loading-indicator
      Show this recording publicly after the broadcast
      #recording_public_indicator{ :class => "#{ (@public_recording) ? 'on' : '' }" }
      = form_tag( {:controller => 'recorded_videos', :action => :set_recording_visibility, :streamapi_stream_id => @stream.id, :public_hostid => @stream.public_hostid}, :remote => true) do
        = hidden_field_tag :public, !@public_recording, :id => 'toggle_recording_visibility_next_value'
        = submit_tag "Toggle recording visibility - click to make #{ (@public_recording) ? 'unpublic' : 'public' }",
                    :id => 'toggle_recording_visibility',
                    :class => "#{ (@public_recording) ? 'on' : '' }"
  -else
    = flash[:error]
    
